## Phase 4 â€” Build (Integration & Consent)

### Current Experience
In the current setup, the integration and consent process is functional but fragmented between the Developer Portal, OLBB, and internal BMO teams.  
Developers often rely on external coordination to complete the production setup.

1. The clientâ€™s IT team integrates their application with BMOâ€™s production API endpoint following static documentation.  
2. They reconstruct authorization URLs manually based on sample guides.  
3. The PCA logs into OLBB, reviews requested services, grants consent, and selects eligible accounts.  
4. The Solution Delivery Consultant (SDC) or API Product Team validates the first consent flow and monitors initial transactions.  
5. Testing, error diagnosis, and consent updates all occur manually through calls or support requests.

---

### Proposed Enhancements
The redesigned **Build** phase aims to make integration hands-on and transparent inside the Developer Portal.  
It gives developers real-time visibility into consent, connection testing, and troubleshooting.

1. **Interactive Consent Flow UI**  
   Embed the full consent journey directly in the portal, displaying authorization scopes visually and reducing reliance on OLBB navigation.  
   ðŸ”— Reference: [Plaid Link Consent Flow](https://plaid.com/docs/link/)  

2. **Consent Management Dashboard**  
   A unified PCA view showing who granted what, for which account, and when.  
   Enables Modify / Revoke actions directly from the dashboard.  
   ðŸ”— Reference: [Google Cloud OAuth 2.0 Consent Screen](https://developers.google.com/identity/protocols/oauth2)  

3. **Quickstart App Templates**  
   Provide ready-to-run starter projects (Node.js, .NET, Java) aligned to each API domain â€” matching tutorials and sandbox data.  
   ðŸ”— Reference: [Stripe Sample Apps on GitHub](https://github.com/stripe-samples)  

4. **Integration Diagnostics Panel**  
   Surface correlation IDs, latency, and error mappings per request.  
   Enables quick debugging without waiting for support logs.  
   ðŸ”— Reference: [Postman Console + Network Inspector](https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/)  

5. **Smart Support Chat (Developer Assistant)**  
   Context-aware AI help embedded within the portal to guide integration, troubleshooting, and consent-related questions.  
   ðŸ”— Reference: [Twilio Docs AI Assistant Blog](https://www.twilio.com/blog/generative-ai-developer-documentation)  

---

### Approved (Post-Workshop)
This section will be updated once FY 2026 workshops finalize Build-phase priorities.  
Each approved item will link to its Decision Record or prototype.

| Enhancement | Decision | Owner | Reference |
|--------------|-----------|--------|------------|
| Interactive Consent Flow | TBD | UX / Engineering | â€” |
| Consent Dashboard | TBD | Platform / Security | â€” |
| Quickstart App Templates | TBD | Developer Relations | â€” |
| Integration Diagnostics Panel | TBD | Engineering / DevOps | â€” |
| Smart Support Chat | TBD | Platform / AI Team | â€” |
